version: '3.8'

services:
  gateway:
    build: ./gateway
    image: lynmoon/gateway:latest
    ports:
      - "8080:8080"
    restart: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - my-network  # Conecta el gateway a la red

  auth-service:
    build: ./auth-service
    image: lynmoon/auth-service:latest
    restart: always
    depends_on:  #  auth-service depende de postgres-db
      postgres-db:
        condition: service_healthy
    environment:
      # Usa el nombre del servicio de la base de datos como host:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/auth_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # O la configuración que necesites
      SPRING_PROFILES_ACTIVE: docker #Ejemplo,remueve si no tienes este profile
    networks:
      - my-network  # Conecta auth-service a la red

  employees-service:
    build: ./employees-service
    image: lynmoon/employees-service:latest
    restart: always
    depends_on:  #  employees-service depende de postgres-db
      postgres-db:
        condition: service_healthy
    environment:
      # Usa el nombre del servicio de la base de datos como host:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/employees_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - my-network  # Conecta employees-service a la red

  attendance-service:
    build: ./attendance-service
    image: lynmoon/attendance-service:latest
    restart: always
    depends_on:  #  attendance-service depende de postgres-db si la necesita
      postgres-db:
        condition: service_healthy
    environment:
      # Usa el nombre del servicio de la base de datos como host:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/attendance_db #si la necesita
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - my-network

  evaluation-service:
    build: ./evaluation-service
    image: lynmoon/evaluation-service:latest
    restart: always
    depends_on: # evaluation-service depende de postgres-db si la necesita
      postgres-db:
        condition: service_healthy
    environment:
      # Usa el nombre del servicio de la base de datos como host:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/evaluation_db #si la necesita
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - my-network

  # Base de datos PostgreSQL (una sola instancia para todos los microservicios)
  postgres-db:
    image: postgres:latest  # Puedes usar una versión específica (ej: postgres:14)
    restart: always
    environment:
      POSTGRES_USER: admin  # Cambia por un usuario/contraseña seguros
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: main_db   #  Base de datos principal (o puedes usar bases de datos separadas)
      #POSTGRES_MULTIPLE_DATABASES: auth_db,employees_db,attendance_db,evaluation_db # Si quieres usar bases separadas
    #ports:
    #  - "5432:5432"  # Descomenta SOLO si necesitas acceder a la BD desde fuera de Docker
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistencia de datos
    networks:
      - my-network  # Conecta la base de datos a la red
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define la red
networks:
  my-network:
    driver: bridge  # Usa el driver bridge (el predeterminado)

# Define el volumen
volumes:
  postgres_data: